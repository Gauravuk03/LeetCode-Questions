class Solution {
public:
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    typedef pair<int, pair<int, int>> P;

    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n = moveTime.size();
        int m = moveTime[0].size();

        // Fix: result should match moveTime's dimensions (n rows, m columns)
        vector<vector<int>> result(n, vector<int>(m, INT_MAX));

        priority_queue<P, vector<P>, greater<P>> pq;

        result[0][0] = 0;
        pq.push({0, {0, 0}});

        while (!pq.empty()) {
            int curr_time = pq.top().first;
            auto cell = pq.top().second;
            int i = cell.first;
            int j = cell.second;
            pq.pop();

            if (i == n - 1 && j == m - 1) {
                return curr_time;
            }

            for (auto& dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                // Fix: Correct bounds check
                if (i_ >= 0 && i_ < n && j_ >= 0 && j_ < m) {
                    int move_cost = (i_ + j_) % 2 == 0 ? 2 : 1;

                    // Fix: Proper wait time calculation
                    int wait = max(moveTime[i_][j_], curr_time);
                    int arrtime = wait + move_cost;

                    if (result[i_][j_] > arrtime) {
                        result[i_][j_] = arrtime;
                        pq.push({arrtime, {i_, j_}});
                    }
                }
            }
        }

        return -1;
    }
};
