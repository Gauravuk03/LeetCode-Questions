class Solution {
public:

   vector<vector<int>>directions{{-1,0},{1,0},{0,1},{0,-1}};

   typedef pair<int,pair<int,int>>P;

    int minimumEffortPath(vector<vector<int>>& heights) {
        
        int m=heights.size();

        int n=heights[0].size();

        vector<vector<int>>result(m,vector<int>(n,INT_MAX));

        priority_queue<P,vector<P>,greater<P>>pq;

        auto isSafe=[&](int x,int y){

            return x>=0 && x<m && y>=0 && y<n;
        };

        int source=0;

        result[0][0]=0;

        pq.push({0,{0,0}});

        while(!pq.empty()){

            auto curr=pq.top();

            pq.pop();

            int d=curr.first;
            auto cordinate=curr.second;

            int x=cordinate.first;

            int y=cordinate.second;

            for(auto& dir:directions){
                int x_=x+dir[0];
                int y_=y+dir[1];

                if(isSafe(x_,y_)){

                    int absdiff= abs(heights[x][y]-heights[x_][y_]);

                    int maxdiff=max(d,absdiff);

                    if(result[x_][y_] > maxdiff){
                        result[x_][y_]=maxdiff;
                        pq.push({maxdiff,{x_,y_}});
                    }
                }
            }
        }

        return result[m-1][n-1];
    }
};
