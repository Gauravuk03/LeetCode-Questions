class Solution {
public:

  typedef pair<int, int> P;  

  int prims(vector<vector<P>>& adj, int V) {  
    priority_queue<P, vector<P>, greater<P>> pq;

    vector<bool> visited(V, false);

    int sum = 0;

    pq.push({0, 0});

    while (!pq.empty()) {
        auto p = pq.top();
        pq.pop();

        int node = p.second;
        int wt = p.first;

      
        if (visited[node] == true) { 
            continue; 
        }

        visited[node] = true;
        sum += wt;

        
        for (auto& tmp : adj[node]) {
            int neighbour = tmp.second;    
            int neighbour_wt = tmp.first;

            if (visited[neighbour] == false) {
                pq.push({neighbour_wt, neighbour});
            }
        }
    }

    return sum;
  }

  int minCostConnectPoints(vector<vector<int>>& points) {

    int V = points.size();

    vector<vector<P>>adj(V);  

    for (int i = 0; i < V; i++) {
        for (int j = i + 1; j < V; j++) {
            int x1 = points[i][0];
            int y1 = points[i][1];

            int x2 = points[j][0];
            int y2 = points[j][1];

            int d = abs(x1 - x2) + abs(y1 - y2);

        
            adj[i].push_back({d, j});
            adj[j].push_back({d, i});
        }
    }

    return prims(adj, V);
  }
};
